#初始化一个Git仓库：git init //在此之前先用cd,pwd定位目录

#添加文件到Git仓库：
    1.git add <file> //可多次使用，添加多个文件; （将内容和修改都放入暂存区）
    2.git commit -m <message>  （从暂存区移入分支）

#掌握工作区的状态：git status

#如果文件被修改过，查看修改内容：git diff

#显示从最近到最远的提交日志：git log
    注：加上 --pretty=oneline 简化信息

#回退版本：git reset --hard (版本)
    当前版本：HEAD   上一个版本：HEAD^   上100个版本：HEAD～100
    回到head ：找到head的版本号

#查看每一次命令：git reflog //可以用来查看版本号

#撤销add之前（工作区）的修改：git checkout -- file

#撤销add之后commit之前的修改： git reset HEAD file

#工作区删除一个文件后：
    1.git rm , 然后要commit，则从库文件里面也删除
    2.恢复：git checkout -- file

#关联一个远程库：git remote add name(库名) git@github.com:hitcjx/文件名.git

#本地提交后，将本地最新修改推送至github：git push origin main

#查看远程库信息：git remote -v

#删除远程库：git remote rm name//如:origin //实际上只是删除绑定关系。

#从github上克隆内容到本地：git clone 地址(htttps/ssh)

#创建分支：git checkout -b dev
    相当于：git branch dev
           git checkout dev

#查看当前分支：git branch

#切换分支：git checkout main

#将dev分支合并到main上，即合并指定分支到当前分支：git merge dev

#删除分支：git branch -d dev

#一种新的命令
    1.创建并切换到新的分支：git switch -c dev
    2.切换到已有分支：git switch main
    
#当两个分支分向不同的两支，无法自动合并的情况下，手动修改合并。
    git log --graph 可以看到分支合并图
    合并时加上--no-f可以避免用fast forward模式从而可以看出曾经做过合并

#分支策略：main是稳定的，仅用来发布新版本而不在上面干活。
            不同的任务合并到dev上再合并到main上。

#暂时停止当前工作：git stash // 实际上是将stash内容存起来

#查看：git stash list

#恢复当前工作：
    1.git stash apply (恢复) 
        git stash drop （删除stash）
    2.git stash pop （两步一起）

#复制一个特定的提交到当前分支：git cherry-pick 提交操作的编号


学到这里暂时发现机器人队的要求还没那么多，就先到这吧。
廖雪峰到教程学到Bug分支结束
https://www.liaoxuefeng.com/wiki/896043488029600/900394246995648

奇怪，为什么推送失败了？
